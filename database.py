import datetime
import locale
import sqlite3
from typing import List, Tuple


class Database:
    def __init__(self):
        self.connection = sqlite3.connect('timetable.db')
        self.cursor = self.connection.cursor()

    def get_groups_by_faculty(self, faculty: str) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É."""
        select_query = 'SELECT –ì—Ä—É–ø–ø–∞ FROM Schedule WHERE –§–∞–∫—É–ª—å—Ç–µ—Ç LIKE ? GROUP BY –ì—Ä—É–ø–ø–∞;'
        self.cursor.execute(select_query, (f'%{faculty}%',))
        groups = self.cursor.fetchall()
        return [group[0] for group in groups]

    def add_or_update_user(self, name, group, channel_id):
        self.cursor.execute("SELECT ID FROM main.Users WHERE ID_–∫–∞–Ω–∞–ª–∞ = ?", (channel_id,))
        result = self.cursor.fetchone()

        if result:
            self.cursor.execute("UPDATE main.Users SET –ì—Ä—É–ø–ø–∞ = ? WHERE ID_–∫–∞–Ω–∞–ª–∞ = ?", (group, channel_id))
        else:
            self.cursor.execute("INSERT INTO main.Users (–ò–º—è, –ì—Ä—É–ø–ø–∞, –î–∞—Ç–∞_—Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏–∏, ID_–∫–∞–Ω–∞–ª–∞) VALUES (?, ?, ?, ?)",
                                (name, group, datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'), channel_id))
        self.connection.commit()

    def get_schedule_by_date(self, group: str, target_date: datetime.date) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É."""
        locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
        date_str = target_date.strftime("%d %B").capitalize()
        self.cursor.execute(
            "SELECT –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ FROM Schedule WHERE –ì—Ä—É–ø–ø–∞ = ? AND –î–∞—Ç–∞ LIKE ?",
            (group, f"%{date_str}%")
        )
        schedule = self.cursor.fetchone()
        if schedule:
            return schedule[0]
        else:
            return "–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –≤ —ç—Ç–æ—Ç –¥–µ–Ω—åüéâ"

    def get_group_by_channel_id(self, channel_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥—Ä—É–ø–ø—É –ø–æ id –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self.cursor.execute(
            "select –ì—Ä—É–ø–ø–∞ from Users where ID_–∫–∞–Ω–∞–ª–∞ = ?",
            (channel_id,)
        )
        group = self.cursor.fetchone()
        return group[0]

    def get_list_users(self):
        self.cursor.execute(
            "SELECT –ò–º—è, ID_–∫–∞–Ω–∞–ª–∞, –ì—Ä—É–ø–ø–∞, strftime('%d.%m.%Y', –î–∞—Ç–∞_—Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏–∏) as –î–∞—Ç–∞_—Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏–∏ FROM Users"
        )
        users = self.cursor.fetchall()

        formatted_users = []
        for user in users:
            name, channel_id, group, registration_date = user
            formatted_user = f"üë§ –ò–º—è: {name}\n" \
                             f"üÜî ID –∫–∞–Ω–∞–ª–∞: {channel_id}\n" \
                             f"üéì –ì—Ä—É–ø–ø–∞: {group}\n" \
                             f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n"
            formatted_users.append(formatted_user)

        return formatted_users

    def fetch_check_dates(self, faculty):
        self.cursor.execute(
            "SELECT –î–∞—Ç–∞_–ø—Ä–æ–≤–µ—Ä–∫–∏ FROM Schedule WHERE LOWER(–§–∞–∫—É–ª—å—Ç–µ—Ç) LIKE LOWER(?) GROUP BY –î–∞—Ç–∞_–ø—Ä–æ–≤–µ—Ä–∫–∏ ORDER BY –î–∞—Ç–∞_–ø—Ä–æ–≤–µ—Ä–∫–∏ DESC LIMIT 1;",
            (f"%{faculty}%",)
        )
        result = self.cursor.fetchone()
        if result:
            date_str = result[0]
            date_obj = datetime.datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
            date_obj += datetime.timedelta(hours=3)
            formatted_date = date_obj.strftime("%H:%M:%S")
            return formatted_date
        else:
            return "–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        self.connection.close()
