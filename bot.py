import asyncio
import datetime
import re
from aiogram import Bot, Dispatcher
from aiogram import types, F
from aiogram.filters import CommandStart
from aiogram.filters.callback_data import CallbackData
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import CallbackQuery, ReplyKeyboardMarkup
from database import Database
from aiogram.enums import ParseMode
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
import psutil

from config import token

bot = Bot(token=token, parse_mode=ParseMode.HTML)
db = Database()
dp = Dispatcher()


class MyCallback(CallbackData, prefix="pref"):
    action: str
    val: str


@dp.message(CommandStart())
async def start(message: types.Message):
    faculties = {
        'üìö –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π': '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π',
        'üíº –≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç': '–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç',
        'üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–π, —Ç–æ–≤–∞—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏ —Å–µ—Ä–≤–∏—Å–∞': '—Ç–æ–≤–∞—Ä–æ–≤–µ–¥–µ–Ω–∏—è',
        'üèõ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': '–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ',
        'üéì –ö–æ–ª–ª–µ–¥–∂': '–ö–æ–ª–ª–µ–¥–∂',
        # 'üë®‚Äçüéì –ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞': '–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞'
    }
    builder = InlineKeyboardBuilder()
    for faculty_name, faculty_id in faculties.items():
        builder.button(text=faculty_name, callback_data=MyCallback(action='faculty', val=faculty_id))
    builder.adjust(2)
    await message.answer(f'üéì –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:', reply_markup=builder.as_markup())


@dp.callback_query(MyCallback.filter(F.action == "faculty"))
async def choose_course(callback: types.CallbackQuery, callback_data: MyCallback):
    faculty = callback_data.val
    groups = db.get_groups_by_faculty(faculty)
    max_course = sorted([int(re.search(r'\d', course).group()) for course in groups])[-1]
    builder = InlineKeyboardBuilder()
    builder2 = InlineKeyboardBuilder()
    for course in range(1, max_course + 1):
        builder.button(text=f"{course} –∫—É—Ä—Å", callback_data=MyCallback(action='course', val=f'{faculty}//{course}'))
    builder.adjust(2)
    builder2.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=MyCallback(action='go_back_to_start', val='start'))
    builder2.adjust(1)
    builder.attach(builder2)
    await callback.message.edit_text(f'üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ:', reply_markup=builder.as_markup())
    await callback.answer()


@dp.callback_query(MyCallback.filter(F.action == "course"))
async def choose_group(callback: types.CallbackQuery, callback_data: MyCallback):
    faculty = callback_data.val.split('//')[0]
    course = int(callback_data.val.split('//')[1])
    groups = db.get_groups_by_faculty(faculty)
    filtered_groups = [group for group in groups if int(re.search(r'\d', group).group()) == course]
    builder = InlineKeyboardBuilder()
    builder2 = InlineKeyboardBuilder()
    for group in filtered_groups:
        builder.button(text=group, callback_data=MyCallback(action='group', val=f'{faculty}//{course}//{group}').pack())

    if len(filtered_groups) <= 6:
        rows = 2  # –î–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–æ–ø–æ–∫ –¥–µ–ª–∞–µ–º 2 —Ä—è–¥–∞
    elif len(filtered_groups) <= 12:
        rows = 3  # –î–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–æ–ø–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º 3 —Ä—è–¥–∞
    else:
        rows = 4  # –î–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–æ–ø–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º 4 —Ä—è–¥–∞ –∏–ª–∏ –±–æ–ª–µ–µ

    builder.adjust(rows)
    builder2.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=MyCallback(action='faculty', val=faculty))
    builder2.adjust(1)
    builder.attach(builder2)
    await callback.message.edit_text('üìö –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:', reply_markup=builder.as_markup())
    await callback.answer()


@dp.callback_query(MyCallback.filter(F.action == "group"))
async def show_schedule_options(callback: types.CallbackQuery, callback_data: MyCallback):
    faculty, course, group = callback_data.val.split('//')[0], callback_data.val.split('//')[1], \
    callback_data.val.split('//')[2]

    confirmation_message = (
        f"*–í—ã –≤—ã–±—Ä–∞–ª–∏:*\n"
        f"üéì *–§–∞–∫—É–ª—å—Ç–µ—Ç:* {faculty}\n"
        f"üìö *–ö—É—Ä—Å:* {course}\n"
        f"üë• *–ì—Ä—É–ø–ø–∞:* {group}\n\n")

    db.add_or_update_user(name=callback.message.chat.first_name, group=group, channel_id=callback.message.chat.id)
    kb_bt = [
        [types.KeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"), types.KeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")],
        [types.KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É")]
    ]
    if callback.message.chat.id in [851960898, 1074252469]:
        kb_bt[1].append(types.KeyboardButton(text="–°–µ—Ä–≤–∏—Å–Ω–æ–µ –º–µ–Ω—é"))
    builder = types.ReplyKeyboardMarkup(keyboard=kb_bt, resize_keyboard=True)

    await callback.message.answer(confirmation_message, reply_markup=builder, parse_mode="Markdown")
    await callback.answer()


@dp.message(F.text.lower() == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
async def show_schedule_today(message: types.Message):
    group = db.get_group_by_channel_id(message.chat.id)
    date = datetime.date.today()
    schedule = db.get_schedule_by_date(group=group, target_date=date)
    await message.answer(schedule)


@dp.message(F.text.lower() == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
async def show_schedule_tomorrow(message: types.Message):
    group = db.get_group_by_channel_id(message.chat.id)
    date = datetime.date.today() + datetime.timedelta(days=1)
    schedule = db.get_schedule_by_date(group=group, target_date=date)
    await message.answer(schedule)


@dp.message(F.text.lower() == "–≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É")
async def show_calendar(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É',
                         reply_markup=await SimpleCalendar(locale='ru_RU.UTF-8').start_calendar()
                         )


@dp.callback_query(SimpleCalendarCallback.filter())
async def process_simple_calendar(callback_query: CallbackQuery, callback_data: CallbackData):
    calendar = SimpleCalendar(
        locale='ru_RU.UTF-8', show_alerts=True
    )
    calendar.set_dates_range(datetime.datetime(2020, 1, 1), datetime.datetime(2030, 12, 31))
    selected, date = await calendar.process_selection(callback_query, callback_data)
    if selected:
        group = db.get_group_by_channel_id(callback_query.message.chat.id)
        schedule = db.get_schedule_by_date(group=group, target_date=date)
        await callback_query.message.delete()
        await callback_query.message.answer(schedule)


@dp.callback_query(MyCallback.filter(F.action == "go_back_to_start"))
async def go_back_to_start(callback_query: types.CallbackQuery, callback_data: MyCallback):
    await callback_query.message.delete()
    await start(callback_query.message)


@dp.message(F.text.lower() == "—Å–µ—Ä–≤–∏—Å–Ω–æ–µ –º–µ–Ω—é")
async def def_menu(message: types.Message):
    if message.chat.id in [851960898, 1074252469]:
        builder = InlineKeyboardBuilder()
        for group_action in ['–ë–∞–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞', '–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π']:
            builder.button(text=group_action, callback_data=MyCallback(action='def_menu', val=group_action))
        builder.adjust(2)
        await message.answer(f'–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=builder.as_markup())
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')


@dp.callback_query(MyCallback.filter(F.action == "def_menu"))
async def ch_rasp_date(callback: types.CallbackQuery, callback_data: MyCallback):
    response = ''
    if callback_data.val == '–ë–∞–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è':
        response = "<b>–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –ø–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º:</b>\n\n"
        faculties = {
            'üìö –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π': '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π',
            'üíº –≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç': '–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç',
            'üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–π, —Ç–æ–≤–∞—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏ —Å–µ—Ä–≤–∏—Å–∞': '—Ç–æ–≤–∞—Ä–æ–≤–µ–¥–µ–Ω–∏—è',
            'üèõ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': '–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ',
            'üéì –ö–æ–ª–ª–µ–¥–∂': '–ö–æ–ª–ª–µ–¥–∂',
            # 'üë®‚Äçüéì –ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞': '–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞'
        }
        for faculty_key, faculty_val in faculties.items():
            times = db.fetch_check_dates(faculty_val)
            if times:
                times_str = times
                response += f"<i>{faculty_key}:</i> {times_str}\n"
            else:
                response += f"<i>{faculty_key}:</i> –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        await callback.message.answer(response, parse_mode='HTML')
        await def_menu(callback.message)
    elif callback_data.val == '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
        data_user = db.get_list_users()
        user_parts = [f'{num}. {el}' for num, el in enumerate(data_user, 1)]
        full_message = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ - {len(data_user)} —á–µ–ª–æ–≤–µ–∫\n\n' + '\n'.join(user_parts)

        if len(full_message) > 4096:
            parts = []
            part = ''
            header = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ - {len(data_user)} —á–µ–ª–æ–≤–µ–∫\n\n'
            for user_part in user_parts:
                if len(part + user_part + '\n') < 4096 - len(header):
                    part += user_part + '\n'
                else:
                    if not parts:
                        part = header + part
                    parts.append(part.strip())
                    part = user_part + '\n'
            if part:
                if not parts:
                    part = header + part
                parts.append(part.strip())
        else:
            parts = [full_message]

        for part in parts:
            await callback.message.answer(part)

        await def_menu(callback.message)

    elif callback_data.val == '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞':
        try:
            temperature_info = psutil.sensors_temperatures(fahrenheit=False)
            if "coretemp" in temperature_info:
                core_temp = temperature_info["coretemp"]
                # –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —è–¥—Ä–∞
                core_temp = sorted(core_temp,
                                   key=lambda x: int(x.label.split(' ')[1]) if x.label.startswith('Core') else float(
                                       'inf'))
                response = ""
                for entry in core_temp:
                    response += f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {entry.label}: {entry.current}¬∞C\n"
            else:
                response = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞."
        except AttributeError:
            response = "–ú–æ–¥—É–ª—å psutil –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ."
        await callback.message.answer(response)
        await def_menu(callback.message)
    # elif callback_data.val == '–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π':
    #     data_user = write_users()
    #     ls_users = [ky for ky in data_user.keys()]
    #     builder = InlineKeyboardBuilder()
    #     for group_action in ls_users:
    #         builder.button(text=group_action, callback_data=MyCallback(action='ch_user', val=group_action))
    #     builder.adjust(2)
    #     await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=builder.as_markup())
    # if callback_data.val != '–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π':
    #     await callback.message.answer(response)
    #     await def_menu(callback.message)


async def main() -> None:
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
